/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.mulesoft.marklogic;

import java.net.URI;

import org.mule.api.ConnectionException;
import org.mule.api.ConnectionExceptionCode;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.display.Password;
import org.mule.api.annotations.lifecycle.Start;

import com.marklogic.xcc.ContentSource;
import com.marklogic.xcc.ContentSourceFactory;
import com.marklogic.xcc.Request;
import com.marklogic.xcc.ResultSequence;
import com.marklogic.xcc.Session;
import com.marklogic.xcc.exceptions.RequestException;
import com.marklogic.xcc.exceptions.RetryableXQueryException;

/**
 * Cloud Connector
 * 
 * @author MuleSoft, Inc.
 */
@Connector(name = "marklogic", schemaVersion = "1.0", friendlyName = "MarkLogic")
public class MarkLogic {

	/**
	 * Configurable
	 */
	@Configurable
	private String server;

	/**
	 * Configurable
	 */
	@Configurable
	private int port;

	/**
	 * Configurable
	 */
	@Configurable
	private String database;

	/**
	 * Configurable
	 */
	@Configurable
	private String username;

	/**
	 * Configurable
	 */
	@Configurable
	@Password
	private String password;

	private ContentSource contentSource;

	private Session multiStatementSession;

	/**
	 * Connect
	 * 
	 * @param server name or ip of the server
	 * @param port port of the server
	 * @param database name of the database
	 * @param username A username
	 * @param password A password
	 * @throws ConnectionException if a connection can't be made
	 */
	@Start
	public void connect() throws ConnectionException {
		String uriTemplate = "xcc://[user]:[password]@[server]:[port]/[database]";
		URI uri;
		try {
			uri = new URI(uriTemplate.replace("[user]", username).replace("[password]", password).replace("[server]", server).replace("[port]", String.valueOf(port)).replace("[database]", database));
			contentSource = ContentSourceFactory.newContentSource(uri);
		} catch (Exception e) {
			throw new ConnectionException(ConnectionExceptionCode.CANNOT_REACH, "", "", e);
		}
	}

	/**
	 * Disconnect
	 */
	@Disconnect
	public void disconnect() {
		contentSource = null;
	}

	/**
	 * Are we connected
	 */
	@ValidateConnection
	public boolean isConnected() {
		return contentSource != null;
	}

	/**
	 * Are we connected
	 */
	@ConnectionIdentifier
	public String connectionId() {
		return username;
	}

	/**
	 * Custom processor
	 * 
	 * {@sample.xml ../../../doc/MarkLogic-connector.xml.sample marklogic:single-statement}
	 * 
	 * @param adhocQuery query to be executed
	 * @return xml string
	 * @throws RequestException if there's an error submitting the request
	 */
	@Processor
	public String singleStatement(String adhocQuery) throws RequestException {
		
		String result = null;

		Session session = contentSource.newSession();

		Request request = session.newAdhocQuery(adhocQuery);

		ResultSequence rs = null;
		
		try {
		
			rs = session.submitRequest(request);
		
		} catch(RetryableXQueryException e) {
			
			try {
			
				Thread.sleep(200);
				
				rs = session.submitRequest(request);
			
			} catch(RequestException exception) {
				
				throw exception;
				
			} catch(Exception other) {}
		}

		session.close();

		result = rs.asString();

		return result;
	}

	/**
	 * Custom processor
	 * 
	 * {@sample.xml ../../../doc/MarkLogic-connector.xml.sample marklogic:begin-transaction}
	 * 
	 */
	@Processor
	public void beginTransaction() {
		// Create a Session and set the transaction mode to trigger

		// multi-statement transaction use.

		multiStatementSession = contentSource.newSession();

		multiStatementSession.setTransactionMode(Session.TransactionMode.UPDATE);
	}

	/**
	 * 
	 * Custom processor
	 * 
	 * {@sample.xml ../../../doc/MarkLogic-connector.xml.sample marklogic:multi-statement}
	 * 
	 * @param adhocQuery query to be executed
	 * @throws RequestException if there's an error submitting the request
	 * @return result
	 */
	@Processor
	public String multiStatement(String adhocQuery) throws RequestException {
		// The request starts a new, multi-statement transaction.
		String result = null;
		result = multiStatementSession.submitRequest(multiStatementSession.newAdhocQuery(adhocQuery)).asString();

		return result;
	}

	/**
	 * Custom processor
	 * 
	 * {@sample.xml ../../../doc/MarkLogic-connector.xml.sample marklogic:commit-transaction}
	 * 
	 * @throws RequestException if there's an error submitting the request
	 * 
	 */
	@Processor
	public void commitTransaction() throws RequestException {
		// After commit, updates are visible to other transactions.

		// Commit ends the transaction after current stmt completes.

		multiStatementSession.commit();

		multiStatementSession.close(); // don't know if necessary
	}

	/**
	 * Custom processor
	 * 
	 * {@sample.xml ../../../doc/MarkLogic-connector.xml.sample marklogic:rollback-transaction} 
	 * 
	 * @throws RequestException if there's an error submitting the request
	 */
	@Processor
	public void rollbackTransaction() throws RequestException {
		// Rollback discards changes and ends the transaction.

		multiStatementSession.rollback();

	}

	public String getUrl() {
		return server;
	}

	/**
	 * Set url
	 * 
	 * @param url Url of Marklogic Server
	 */
	public void setUrl(String url) {
		this.server = url;
	}

	public int getPort() {
		return port;
	}

	/**
	 * Set port
	 * 
	 * @param port
	 *            Marklogic port
	 */
	public void setPort(int port) {
		this.port = port;
	}

	public String getDatabase() {
		return database;
	}

	public void setDatabase(String database) {
		this.database = database;
	}

	public String getServer() {
		return server;
	}

	public void setServer(String server) {
		this.server = server;
	}

	public ContentSource getContentSource() {
		return contentSource;
	}

	public void setContentSource(ContentSource contentSource) {
		this.contentSource = contentSource;
	}

	public Session getMultiStatementSession() {
		return multiStatementSession;
	}

	public void setMultiStatementSession(Session multiStatementSession) {
		this.multiStatementSession = multiStatementSession;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

}
